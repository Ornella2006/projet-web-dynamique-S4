Methode de travail dans git qu'on parlera dans ce projet et dans le projet en S5
Approche {
    mais qu'on ne trouvera pas forcement dans le monde du travail
    il peut marcher que ca soit sur :
    github
    ou gitlab
}

technologies => un peu different mais c'est a nous de les rechercher
normalement y'a toutes les Fonctionnalites dans github et gitlab

quand on aurait fini les listes de Fonctionnalites et les descriptions de ces listes de Fonctionnalites consequentes
on devrait maintenant decider de qui faire en premier genre develloper en preums
toutes les fonctionnalités n'ont pas besoin d'interface
et on devrait egalement decider lequel a besoin d'interface ou d'ecran
on peut juste faire select ou script et non des plusieurs de CRUD mais la plupart devrait juste etre en script
mais pour de vrai,  les Fonctionnalites qu'on a mis des descriptions detaillées devront etre implementer en general les autres juste script d'insertion seulement

on devrait arranger ce qu'on devrait faire en premier quand on aurait fini la liste des fonctionnalités et on arrangera ce qu'on fera en premier, les fonctionnalités tous ça
quand on trouvera cela, peut etre 1 ou 2 on les assemblera, voici ce qu'on devrait faire en preums, et ca peut etre un seul seulement et c'est pas grave, dans notre cas c'est pas grave
peut par exemple ne faire d'abord qu'une fonctionnalité de recherche MULTICritere de livre

Chaque fonctionnalités {

    voici les cycles qu'on devrait faire :
    les futurs fonctionnalités qu'on fera
    creation d'une branche main ou principale(repository) dans github
    on travail => on clone la branche
    clone => nom => correspondant au nom du fonctionnalités (exemple :  futur...) => devrait vraiment correspondre aux fonctionnalités

    on travail :
    dans un cadre de spring, peut avoir plusieurs fonctionnalités
    exemple on ne fera qu'1 seul fonctionnalités
    on commitera apres avoir travailler le soir ou qu'on vient de travailler ou de finir quelque chose
    on peut tester localement 

    quand on est satisfait et qu'on a bien fini les fonctionnalités => on commit

    on finit modele, repository, controller, a chaque finission d'etape on peut commite
    ce n'est qu'a la fin qu'on teste localement si ca marche ou pas
    et normalement on devrait directement merger ce "main" mais on ne fait pas de "merge" mais on fait "PR" ou "Pull Request"
    "PR" = veut merger ces modifications, modif dans ces commit, on demande à merger, demande de merge
    c'est vrai que dans ce projet on est responsable individuellement mais dans le monde réel(du travail), notre travail est develloper, on clonera la branche principale on nous donnera les fonctionnalités a implémenter
    beaucoup de dev chacun son travail et on a besoin de ce "PR" pour demander a merger et on peut voir dans l'interface qu'on se demande un merge par rapport à une branche
    et on demande à etre valider
    ce branche => tous les modifs ici j'aimerais le merger dans cette branche principale
    Demande de "PR" et non directe => merge


    on regardera plus tard les listes de "PR", description => bien claire toujours correspondant aux noms des fonctionnalités,

    reel {
        equipe dans un devellopment info  technologies utiliser => tres agile, par exemple le projet est ce projet de bibliotheque, pas directement attaquer mais par exemple commencer par le module gestion de livre 
        gestion livre non use case mais module et dedans y'a plusieurs use case ou cas d'utilisation et on choisit parmis ces cas d'utilisation par exemple develloper 1 va ajouter des livres et une autre va faire la recherche, etc
        et cela dans une duree determiner, generalement en 2semaines c'est normalement la durée d'une sprint(ensemble d'une fonctionnalité), choix d'un sprint, commencement et finit jusqu' au test et deploiement
        client test => anomalie => retour, satisfait => prochaine fonctionnalité
        equipe dedans => y'a des roles => postes => TL
    }

    
    nouvelle fonctionnalité => nouvelle branche => clone => fait des modifs => pull request => merge
    PR qu'il regarde, apres cela on supprime le branche car on en a plus besoin, pas besoin de beaucoup de branches mais seulement branche en cours et branche principale


   
}



Fonctionnalites {

    recherche MULTICritere de livre
}


.soutenance {
    y'a plusieurs points : à eviter :
        -ne pas parler que de code, dans livre, presentation
        -or il a fait configuration reseau, server et bcp d'autres choses qu'il a pas dit 
        -car on a tendance a penser que travailler = coder seulement
        -description textuelle => bien ecrire dans le livre = temps d'ecriture d'une partie de cahier de charge, voici les fonctionnalité que j'ai eu à ecrire
        -formation => planning =>  nombres de jour, redaction manuelle user => nnbre de jour mais pas seulement code vu que le code c'est deja notre travail avec 
        requiert de besoin, etc donc pas seulement focus concernant le code
        -comment on a gerer CICD

} 

integration continue => continue avec deploiement continu {
    branche => clone => travail => commit localement => on travail sur la fonctionnalité => modif => commit => PR => on accepte => merge @ branche principale
    liste PR qu'il regardera
}

code non performant {
    boucle inutile 
    variable inutile
}

comment faire quand y'a deploiement  {
    quand on a finit sprint en cours {
        deployer => generalement => y'a 2envir minimum deploier app {
            env de test
            env de production
            les merges de tous les develloper sont finis => deploiement de fonctionnalité develloper dans le sprint => creation de branche release
            et dans release {
                deploiement dans staging(env de test)
                dans enviro staging => clone release et il l'a => peut compile et tous <= exemple, mais y'a deja des outils pour faire des deploiement => deploiement continu
                clone simple => on a derniere version => on connait l'url release => creation branche release => on test => si y'a un probleme => 
                test => y'a un probleme => alert au dev du probleme sur ce qui ne marche pas => creation de branche issu de main (dans le branche, on met BugFiles avec num de ticket car la plupartes des bugs fais dans le staging, c'est
                le testeur qui fait le test, dans une equipe y'a dev TL et QA(Quality Assurance) et ce sont les QA qui font le test ce ne sont pas des deve et la majorité des femmes => creer ticket)
                ticket => app gerer les futurs fonctionnalité generalement => "traineau, JiRA" => app qui gere
                et dedans on dit voici les fonctionnalité dans ce sprint => ticket et y'a des num et assignés aux deve
                bugs => creation d'un nouvel ticket 
                creation branche => commit => test local => PR => TL decide s'il faut merger ou pas, si oui merger dans main(branche principale) mais en meme temps les modifs doivent etre envoyees aux branches release car c'est la branche 
                qui va etre tester dans le staging vu qu'on ne peut pas encore faire merger des modifs a plusieurs branches mais seulement branche principale que tu demaned par le biais de PR mais apres dans l'interface y'a Cherry pic, PR appeler
                Cherry Pic, prend le changement dans le PR et envoie et applique dans cette branche release, Cherry Pic a une source(changement de le PR) et destination(branche du release en cours) et il prend tous les modifs et ils appliquent dans
                le release et ils redeploient et QA reteste et si c'est pas encore satisfait on recommence jusqu a etre satisfait, dans l'environnement staging ou de test ou preprod, on demande le deploiement du release dans environnement de production
            }
        }
    }
}


demande {
    -PR avant de merge
}

Fonctionnalité {
    gestion = module et non fonctionnalité devrait etre diviser (gestion des adherents)
    verbe d'action
    details

}

EXEMPLE DE FONCTIONNALITE {
    RESERVER UN EXEMPLAIRE
}

    reservation => non disponible a partir de la date de reservation 
    date et heure pour la demande de reservation

    details et reflexions important

quand on fera nos livres => on pourra utiliser ce format qu'on apprend pour illustrer chacun des cas d'utilisation 
